{"version":3,"sources":["components/Square.js","components/Board.js","Game.js","reportWebVitals.js","index.js"],"names":["Square","value","handleClickProp","highlight","type","className","onClick","defaultProps","Board","squares","winnerSquares","Array","keys","map","i","j","includes","renderSquare","Game","status","useState","fill","location","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","sortAscending","setSortAscending","calculateWinner","lines","length","a","b","c","moves","move","step","x","y","desc","Button","jumpTo","size","variant","join","current","winner","every","elem","Container","as","Row","rows","Col","newHistory","slice","newSquares","Math","floor","prev","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1845c963.chunk.js","sourcesContent":["import { PropTypes } from 'prop-types';\n\nconst Square = ({ value, handleClickProp, highlight }) => (\n  <button\n    type=\"button\"\n    className={`square${highlight ? ' bg-success' : ''}`}\n    onClick={handleClickProp}\n  >\n    {value}\n  </button>\n);\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  handleClickProp: PropTypes.func.isRequired,\n  highlight: PropTypes.bool.isRequired,\n};\n\nSquare.defaultProps = {\n  value: null,\n};\n\nexport default Square;\n","import { PropTypes } from 'prop-types';\nimport Square from './Square';\n\nconst Board = ({ squares, handleClickProp, winnerSquares }) => {\n  const renderSquare = (i) => (\n    <Square\n      key={i}\n      value={squares[i]}\n      highlight={winnerSquares.includes(i)}\n      handleClickProp={() => handleClickProp(i)}\n    />\n  );\n\n  return (\n    <div>\n      {[...Array(3).keys()].map((i) => (\n        <div key={i}>{[...Array(3).keys()].map((j) => renderSquare(3 * i + j))}</div>\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(String).isRequired,\n  handleClickProp: PropTypes.func.isRequired,\n  winnerSquares: PropTypes.arrayOf(Number).isRequired,\n};\n\nexport default Board;\n","import { useState } from 'react';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport Board from './components/Board';\n\nconst Game = () => {\n  const [history, setHistory] = useState([\n    {\n      squares: [...Array(9).fill(null)],\n      location: ['Easter', 'Egg'],\n    },\n  ]);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [sortAscending, setSortAscending] = useState(true);\n\n  const calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i += 1) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return [squares[a], lines[i]];\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (i) => {\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[newHistory.length - 1];\n    const newSquares = [...current.squares];\n    if (calculateWinner(newSquares) || newSquares[i]) return;\n    newSquares[i] = xIsNext ? 'X' : 'O';\n    const location = [Math.floor(i / 3), i % 3];\n    setHistory([\n      ...newHistory,\n      {\n        squares: newSquares,\n        location,\n      },\n    ]);\n    setXIsNext((prev) => !prev);\n    setStepNumber(newHistory.length);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const moves = history.map((move, step) => {\n    const [x, y] = move.location;\n    const desc = step ? (\n      <span>\n        Go to move #{step}\n        <br className=\"d-md-none\" />\n        (Col: {y}, Row: {x})\n      </span>\n    ) : (\n      'Go to game start'\n    );\n    return (\n      <div key={move.squares.join('')}>\n        <Button\n          className={`mb-1 ${step === stepNumber ? ' fw-bold' : ''}`}\n          onClick={() => jumpTo(step)}\n          size=\"sm\"\n          variant=\"secondary\"\n        >\n          {desc}\n        </Button>\n      </div>\n    );\n  });\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n  let status;\n  if (winner) status = `Winner: ${winner[0]}`;\n  else if (current.squares.every((elem) => elem)) status = 'Draw';\n  else status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  return (\n    <Container as=\"main\" className=\"min-vh-100 d-flex flex-column justify-content-center pt-5\">\n      <Row className=\"mx-0 justify-content-center\" rows={2}>\n        <Col className=\"d-flex justify-content-end align-items-center\">\n          <Board\n            squares={current.squares}\n            winnerSquares={winner ? winner[1] : []}\n            handleClickProp={(i) => handleClick(i)}\n          />\n        </Col>\n        <Col>\n          <Button onClick={() => setSortAscending((prev) => !prev)}>\n            Sort: {sortAscending ? 'Ascending' : 'Descending'}\n          </Button>\n          <p className=\"lead my-2\">{status}</p>\n          <ul className={`mb-0 list-unstyled d-flex flex-column${sortAscending ? '' : '-reverse'}`}>\n            {moves}\n          </ul>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Game;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}