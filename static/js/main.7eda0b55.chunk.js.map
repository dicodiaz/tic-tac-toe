{"version":3,"sources":["components/Square.js","components/Board.js","Game.js","reportWebVitals.js","index.js"],"names":["Square","value","handleClickProp","type","className","onClick","defaultProps","Board","squares","renderSquare","i","Game","status","useState","Array","fill","location","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","calculateWinner","lines","length","a","b","c","moves","map","move","step","x","y","desc","boldSelected","jumpTo","join","current","winner","newHistory","slice","newSquares","Math","floor","prev","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eda0b55.chunk.js","sourcesContent":["import { PropTypes } from 'prop-types';\n\nconst Square = ({ value, handleClickProp }) => (\n  <button type=\"button\" className=\"square\" onClick={handleClickProp}>\n    {value}\n  </button>\n);\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  handleClickProp: PropTypes.func.isRequired,\n};\n\nSquare.defaultProps = {\n  value: null,\n};\n\nexport default Square;\n","import { PropTypes } from 'prop-types';\nimport Square from './Square';\n\nconst Board = ({ squares, handleClickProp }) => {\n  const renderSquare = (i) => (\n    <Square value={squares[i]} handleClickProp={() => handleClickProp(i)} />\n  );\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(String).isRequired,\n  handleClickProp: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import { useState } from 'react';\nimport Board from './components/Board';\n\n/* TODO:\nBold the currently selected item in the move list.\nRewrite Board to use two loops to make the squares instead of hardcoding them.\nAdd a toggle button that lets you sort the moves in either ascending or descending order.\nWhen someone wins, highlight the three squares that caused the win.\nWhen no one wins, display a message about the result being a draw. */\n\nconst Game = () => {\n  const [history, setHistory] = useState([\n    {\n      squares: [...Array(9).fill(null)],\n      location: ['Easter', 'Egg'],\n    },\n  ]);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [stepNumber, setStepNumber] = useState(0);\n\n  const calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i += 1) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (i) => {\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[newHistory.length - 1];\n    const newSquares = [...current.squares];\n    if (calculateWinner(newSquares) || newSquares[i]) return;\n    newSquares[i] = xIsNext ? 'X' : 'O';\n    const location = [Math.floor(i / 3), i % 3];\n    setHistory([\n      ...newHistory,\n      {\n        squares: newSquares,\n        location,\n      },\n    ]);\n    setXIsNext((prev) => !prev);\n    setStepNumber(newHistory.length);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const moves = history.map((move, step) => {\n    const [x, y] = move.location;\n    const desc = step ? `Go to move #${step}: (${y}, ${x})` : 'Go to game start';\n    const boldSelected = step === stepNumber ? 'fw-bold' : '';\n    return (\n      <li key={move.squares.join('')}>\n        <button className={boldSelected} type=\"button\" onClick={() => jumpTo(step)}>\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n  let status;\n  if (winner) status = `Winner: ${winner}`;\n  else status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={current.squares} handleClickProp={(i) => handleClick(i)} />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}