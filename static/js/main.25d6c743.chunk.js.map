{"version":3,"sources":["components/Square.js","components/Board.js","Game.js","reportWebVitals.js","index.js"],"names":["Square","value","handleClickProp","type","className","onClick","defaultProps","Board","squares","renderSquare","i","Game","status","useState","Array","fill","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","calculateWinner","lines","length","a","b","c","moves","map","step","move","desc","jumpTo","join","current","winner","newHistory","slice","newSquares","prevHistory","prev","handleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25d6c743.chunk.js","sourcesContent":["import { PropTypes } from 'prop-types';\n\nconst Square = ({ value, handleClickProp }) => (\n  <button type=\"button\" className=\"square\" onClick={handleClickProp}>\n    {value}\n  </button>\n);\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  handleClickProp: PropTypes.func.isRequired,\n};\n\nSquare.defaultProps = {\n  value: null,\n};\n\nexport default Square;\n","import { PropTypes } from 'prop-types';\nimport Square from './Square';\n\nconst Board = ({ squares, handleClickProp }) => {\n  const renderSquare = (i) => (\n    <Square value={squares[i]} handleClickProp={() => handleClickProp(i)} />\n  );\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(String).isRequired,\n  handleClickProp: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import { useState } from 'react';\nimport Board from './components/Board';\n\n/* TODO:\nDisplay the location for each move in the format (col, row) in the move history list.\nBold the currently selected item in the move list.\nRewrite Board to use two loops to make the squares instead of hardcoding them.\nAdd a toggle button that lets you sort the moves in either ascending or descending order.\nWhen someone wins, highlight the three squares that caused the win.\nWhen no one wins, display a message about the result being a draw. */\n\nconst Game = () => {\n  const [history, setHistory] = useState([\n    {\n      squares: [...Array(9).fill(null)],\n    },\n  ]);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [stepNumber, setStepNumber] = useState(0);\n\n  const calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i += 1) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (i) => {\n    const newHistory = history.slice(0, stepNumber + 1);\n    const current = newHistory[newHistory.length - 1];\n    const newSquares = [...current.squares];\n    if (calculateWinner(newSquares) || newSquares[i]) return;\n    newSquares[i] = xIsNext ? 'X' : 'O';\n    setHistory((prevHistory) => [...prevHistory, { squares: newSquares }]);\n    setXIsNext((prev) => !prev);\n    setStepNumber(newHistory.length);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const moves = history.map((step, move) => {\n    const desc = move ? `Go to move #${move}` : 'Go to game start';\n    return (\n      <li key={step.squares.join('')}>\n        <button type=\"button\" onClick={() => jumpTo(move)}>\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n  let status;\n  if (winner) status = `Winner: ${winner}`;\n  else status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={current.squares} handleClickProp={(i) => handleClick(i)} />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}